/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import Class.Client;
import Class.User;
import Class.Command.LogoutCommand;
import Class.Iterator.ClientIterator;
import Class.Iterator.CompanyIterator;
import Class.Iterator.ProductIterator;
import Class.Observer.SumObserver;
import Class.Observer.SumSubject;
import Class.Product;
import Class.State.Order;
import Interfaces.IntClient;
import Interfaces.IntCompany;
import Interfaces.IntLogOut;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author AdriiM_
 */
public class GameSearch extends javax.swing.JFrame {

    /**
     * Creates new form GameSearch
     */
    public GameSearch() {
        Dimension pantalla = Toolkit.getDefaultToolkit().getScreenSize();
        int height = pantalla.height / 2;
        int width = pantalla.width / 2;
        setSize(width, height);
        setLocationRelativeTo(null);

        initComponents();
        try {
            addRowToJTable();
        } catch (Exception ex) {
            Logger.getLogger(AllCompanies.class.getName()).log(Level.SEVERE, null, ex);
        }

        this.setTitle("JavaPop");

        ImageIcon imagen = new ImageIcon("./images/LogoApp 01.png");
        this.setIconImage(imagen.getImage());

        float wallet = getWallet(User.activeUser.get(0).getEmail());
        MoneyLabel.setText(String.valueOf(wallet));
    }

    private float getWallet(String email) {
        try {
            ClientIterator iterator = new ClientIterator();
            while (iterator.hasNext()) {
                IntClient client = iterator.next();
                if (client.getEmail().equals(email)) {
                    return client.getWallet();
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
        return 0;
    }

    public void addRowToJTable() throws Exception {

        DefaultTableModel model = (DefaultTableModel) AllProductsTable.getModel();

        ProductIterator iterator = new ProductIterator();
        Object rowData[] = new Object[AllProductsTable.getColumnCount()];

        while (iterator.hasNext()) {
            Product product = iterator.next();

            rowData[0] = product.getId();
            rowData[1] = product.getTitle();
            rowData[2] = product.getDescription();
            rowData[3] = product.getCategory();
            rowData[4] = product.getPrice();
            rowData[5] = product.getCompany().getName();

            model.addRow(rowData);

        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TitleField = new javax.swing.JTextField();
        CategoryComboBox = new javax.swing.JComboBox<>();
        MaxPriceSlider = new javax.swing.JSlider();
        SearchButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        AllProductsPane = new javax.swing.JScrollPane();
        AllProductsTable = new javax.swing.JTable();
        AddShoppingCartButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        MoneyLabel = new javax.swing.JLabel();
        ManuBar = new javax.swing.JMenuBar();
        ProfileMenu = new javax.swing.JMenu();
        ProfileItem = new javax.swing.JMenuItem();
        AddMoneyItem = new javax.swing.JMenuItem();
        ShoppingCartMenu = new javax.swing.JMenu();
        ShoppingCartItem = new javax.swing.JMenuItem();
        SessionCloseMenu = new javax.swing.JMenu();
        SessionCloseItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        TitleField.setText("Inserte título...");
        TitleField.setToolTipText("");
        TitleField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TitleFieldMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                TitleFieldMouseEntered(evt);
            }
        });
        TitleField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TitleFieldActionPerformed(evt);
            }
        });

        CategoryComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione una categoria", "Rol", "Acción", "Estrategia", "Aventura", "Simulación", "Deportes", "Carreras" }));
        CategoryComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CategoryComboBoxActionPerformed(evt);
            }
        });

        SearchButton.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 12)); // NOI18N
        SearchButton.setText("Buscar");

        jLabel1.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 12)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Precio máximo");

        jLabel2.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 18)); // NOI18N
        jLabel2.setText("Todos los productos:");

        jLabel3.setText("---------------------------------------------------------------------------------------------------------------------------------------------------------------------");

        AllProductsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Titulo", "Descripción", "Categoría", "Precio", "Empresa"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        AllProductsPane.setViewportView(AllProductsTable);

        AddShoppingCartButton.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 12)); // NOI18N
        AddShoppingCartButton.setText("Añadir al carrito");
        AddShoppingCartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddShoppingCartButtonActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 12)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Dinero:");

        ProfileMenu.setText("Perfil");

        ProfileItem.setText("Ver Datos");
        ProfileItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProfileItemActionPerformed(evt);
            }
        });
        ProfileMenu.add(ProfileItem);

        AddMoneyItem.setText("Añadir Dinero");
        AddMoneyItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddMoneyItemActionPerformed(evt);
            }
        });
        ProfileMenu.add(AddMoneyItem);

        ManuBar.add(ProfileMenu);

        ShoppingCartMenu.setText("Carrito");

        ShoppingCartItem.setText("Ver Carrito");
        ShoppingCartItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShoppingCartItemActionPerformed(evt);
            }
        });
        ShoppingCartMenu.add(ShoppingCartItem);

        ManuBar.add(ShoppingCartMenu);

        SessionCloseMenu.setText("Cerrar Sesión");

        SessionCloseItem.setText("Cerrar Sesion");
        SessionCloseItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SessionCloseItemActionPerformed(evt);
            }
        });
        SessionCloseMenu.add(SessionCloseItem);

        ManuBar.add(SessionCloseMenu);

        setJMenuBar(ManuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(AllProductsPane, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(AddShoppingCartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(TitleField, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(CategoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(MaxPriceSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(MoneyLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(SearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(61, 61, 61))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TitleField, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CategoryComboBox))
                        .addGap(27, 27, 27))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                            .addComponent(MoneyLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(SearchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(MaxPriceSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(AllProductsPane, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(AddShoppingCartButton)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TitleFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TitleFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TitleFieldActionPerformed

    private void SessionCloseItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SessionCloseItemActionPerformed
        int resp = JOptionPane.showConfirmDialog(null, "¿Está seguro de que quiere cerrar sesión?", "Cerrar Sesión", JOptionPane.YES_NO_OPTION);
        if (resp == 0) {
            IntLogOut logOutCommand = new LogoutCommand();
            logOutCommand.logOut(this);
        }
    }//GEN-LAST:event_SessionCloseItemActionPerformed

    private void ProfileItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProfileItemActionPerformed
        // TODO add your handling code here:
        ClientProfile profile = new ClientProfile();
        profile.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_ProfileItemActionPerformed

    private void ShoppingCartItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShoppingCartItemActionPerformed
        // TODO add your handling code here:
        MyCart cart = new MyCart();
        cart.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_ShoppingCartItemActionPerformed

    private void AddShoppingCartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddShoppingCartButtonActionPerformed
        int num = AllProductsTable.getSelectedRow();
        if(num > -1) {
            try {
                DefaultTableModel modelo = (DefaultTableModel) AllProductsTable.getModel();
                ProductIterator productIterator = new ProductIterator();
                while (productIterator.hasNext())
                {
                    Product product = productIterator.next();
                    if((Integer) AllProductsTable.getValueAt(num, 0) == product.getId())
                        productIterator.deleteProduct(product);
                        Order order = Order.getInstance();
                        order.addProduct(product);
                        modelo.removeRow(num);
                }
            } catch (Exception ex) {
                Logger.getLogger(GameSearch.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecciona un producto a añadir.", "Añadir producto", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_AddShoppingCartButtonActionPerformed

    private void CategoryComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CategoryComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CategoryComboBoxActionPerformed

    private void TitleFieldMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TitleFieldMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_TitleFieldMouseEntered

    private void TitleFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TitleFieldMouseClicked
        if (TitleField.getText().equals("Inserte título..."))
            TitleField.setText("");
    }//GEN-LAST:event_TitleFieldMouseClicked

    private void AddMoneyItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddMoneyItemActionPerformed
        float money = Float.parseFloat(JOptionPane.showInputDialog(null, "Escriba la cantidad de dinero que desea añadir"));

        SumSubject dataSource = new SumSubject();
        SumObserver observer = new SumObserver();

        dataSource.registerObserver(observer);

        dataSource.getClientData(getWallet(User.activeUser.get(0).getEmail()));
        dataSource.getExternalData(money);

        dataSource.removeObserver(observer);

        float wallet = getWallet(User.activeUser.get(0).getEmail());
        MoneyLabel.setText(String.valueOf(wallet));
    }//GEN-LAST:event_AddMoneyItemActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AddMoneyItem;
    private javax.swing.JButton AddShoppingCartButton;
    private javax.swing.JScrollPane AllProductsPane;
    private javax.swing.JTable AllProductsTable;
    private javax.swing.JComboBox<String> CategoryComboBox;
    private javax.swing.JMenuBar ManuBar;
    private javax.swing.JSlider MaxPriceSlider;
    private javax.swing.JLabel MoneyLabel;
    private javax.swing.JMenuItem ProfileItem;
    private javax.swing.JMenu ProfileMenu;
    private javax.swing.JButton SearchButton;
    private javax.swing.JMenuItem SessionCloseItem;
    private javax.swing.JMenu SessionCloseMenu;
    private javax.swing.JMenuItem ShoppingCartItem;
    private javax.swing.JMenu ShoppingCartMenu;
    private javax.swing.JTextField TitleField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    // End of variables declaration//GEN-END:variables

}
